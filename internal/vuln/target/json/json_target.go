package json

import (
	"encoding/json"
	"fmt"
	"os"

	"github.com/ckotzbauer/vulnerability-operator/internal/vuln"
)

type JsonTarget struct {
	scanResult vuln.ScanResult
	reportsDir string
}

func NewJsonTarget(reportsDir string) *JsonTarget {
	return &JsonTarget{scanResult: vuln.ScanResult{}, reportsDir: reportsDir}
}

func (t *JsonTarget) Initialize() {
}

func (t *JsonTarget) ValidateConfig() error {
	if t.reportsDir == "" {
		return fmt.Errorf("%s is empty", vuln.ConfigKeyReportsDir)
	}

	return nil
}

func (t *JsonTarget) ProcessVulns(result vuln.ScanResult) error {
	t.scanResult = result
	return nil
}

func (t *JsonTarget) Finalize() error {
	found, err := json.MarshalIndent(t.scanResult.FoundVulnerabilities, "", "  ")
	if err != nil {
		return err
	}

	audited, err := json.MarshalIndent(t.scanResult.AuditedVulnerabilities, "", "  ")
	if err != nil {
		return err
	}

	/* #nosec */
	err = os.MkdirAll(t.reportsDir, 0755)
	if err != nil {
		return err
	}

	err = os.WriteFile(t.reportsDir+"/report.json", found, 0600)
	if err != nil {
		return err
	}

	return os.WriteFile(t.reportsDir+"/audited.json", audited, 0600)
}
