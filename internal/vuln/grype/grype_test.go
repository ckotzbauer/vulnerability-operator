package grype_test

import (
	"fmt"
	"os"
	"testing"

	"github.com/ckotzbauer/libk8soci/pkg/oci"
	"github.com/ckotzbauer/vulnerability-operator/internal/vuln"
	"github.com/ckotzbauer/vulnerability-operator/internal/vuln/grype"
	"github.com/ckotzbauer/vulnerability-operator/internal/vuln/source"
	"github.com/stretchr/testify/assert"
)

type testData struct {
	testType string
	imageID  string
	expected []vulnerabilitySlim
}

type vulnerabilitySlim struct {
	id       string
	name     string
	group    string
	severity string
}

func testSbomVulnerabilities(t *testing.T, testType, imageID string, expected []vulnerabilitySlim) {
	g, err := grype.New("", "", "medium", false, true)
	assert.NoError(t, err)

	b, _ := os.ReadFile(fmt.Sprintf("fixtures/%s-alpine-sbom.json", testType))
	vulnerabilities, err := g.ScanItem(source.Sbom{Sbom: string(b), ImageID: imageID})
	assert.NoError(t, err)
	vulnSlim := convertVulns(vulnerabilities)

	assert.ElementsMatch(t, expected, vulnSlim)
}

func testImageVulnerabilities(t *testing.T, imageID string, expected []vulnerabilitySlim) {
	g, err := grype.New("", "", "medium", false, true)
	assert.NoError(t, err)

	vulnerabilities, err := g.ScanItem(source.Image{RegistryImage: oci.RegistryImage{ImageID: imageID}})
	assert.NoError(t, err)
	vulnSlim := convertVulns(vulnerabilities)

	assert.ElementsMatch(t, expected, vulnSlim)
}

func convertVulns(vulnerabilities []vuln.Vulnerability) []vulnerabilitySlim {
	vulnSlim := make([]vulnerabilitySlim, 0)
	for _, v := range vulnerabilities {
		vulnSlim = append(vulnSlim, vulnerabilitySlim{
			id:       v.ID,
			name:     v.Package,
			group:    v.Type,
			severity: v.Severity,
		})
	}

	return vulnSlim
}

func TestGrypeSbom(t *testing.T) {
	tests := []testData{
		{
			testType: "vulnerable",
			imageID:  "alpine:3.15.0",
			expected: []vulnerabilitySlim{
				{id: "CVE-2022-28391", name: "busybox", group: "apk", severity: "High"},
				{id: "CVE-2021-4160", name: "libcrypto1.1", group: "apk", severity: "Medium"},
				{id: "CVE-2022-0778", name: "libcrypto1.1", group: "apk", severity: "High"},
				{id: "CVE-2022-0778", name: "libretls", group: "apk", severity: "High"},
				{id: "CVE-2021-4160", name: "libssl1.1", group: "apk", severity: "Medium"},
				{id: "CVE-2022-0778", name: "libssl1.1", group: "apk", severity: "High"},
				{id: "CVE-2022-2097", name: "libcrypto1.1", group: "apk", severity: "Medium"},
				{id: "CVE-2022-2097", name: "libssl1.1", group: "apk", severity: "Medium"},
				{id: "CVE-2022-28391", name: "ssl_client", group: "apk", severity: "High"},
				{id: "CVE-2018-25032", name: "zlib", group: "apk", severity: "High"},
				{id: "CVE-2022-37434", name: "zlib", group: "apk", severity: "Critical"},
			},
		},
		{
			testType: "clean",
			imageID:  "alpine:3.16.2",
			expected: []vulnerabilitySlim{},
		},
	}

	for _, v := range tests {
		t.Run(fmt.Sprintf("test-sbom-%s", v.testType), func(t *testing.T) {
			testSbomVulnerabilities(t, v.testType, v.imageID, v.expected)
		})
	}
}

func TestGrypeImage(t *testing.T) {
	tests := []testData{
		{
			testType: "vulnerable",
			imageID:  "alpine:3.15.0",
			expected: []vulnerabilitySlim{
				{id: "CVE-2022-28391", name: "busybox", group: "apk", severity: "High"},
				{id: "CVE-2021-4160", name: "libcrypto1.1", group: "apk", severity: "Medium"},
				{id: "CVE-2022-0778", name: "libcrypto1.1", group: "apk", severity: "High"},
				{id: "CVE-2022-0778", name: "libretls", group: "apk", severity: "High"},
				{id: "CVE-2021-4160", name: "libssl1.1", group: "apk", severity: "Medium"},
				{id: "CVE-2022-0778", name: "libssl1.1", group: "apk", severity: "High"},
				{id: "CVE-2022-2097", name: "libcrypto1.1", group: "apk", severity: "Medium"},
				{id: "CVE-2022-2097", name: "libssl1.1", group: "apk", severity: "Medium"},
				{id: "CVE-2022-28391", name: "ssl_client", group: "apk", severity: "High"},
				{id: "CVE-2018-25032", name: "zlib", group: "apk", severity: "High"},
				{id: "CVE-2022-37434", name: "zlib", group: "apk", severity: "Critical"},
			},
		},
		{
			testType: "clean",
			imageID:  "alpine:3.16.2",
			expected: []vulnerabilitySlim{},
		},
	}

	for _, v := range tests {
		t.Run(fmt.Sprintf("test-image-%s", v.testType), func(t *testing.T) {
			testImageVulnerabilities(t, v.imageID, v.expected)
		})
	}
}
